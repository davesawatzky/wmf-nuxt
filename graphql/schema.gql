# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type AuthPayload {
  diatonicToken: String
  user: User
  userErrors: [UserError!]!
}

type Category {
  description: String
  festivalClasses(
    levelID: Int!
    performerType: PerformerType!
    subdisciplineID: Int!
  ): [FestivalClass!]
  id: Int!
  levels: [Level!]
  name: String!
  requiredComposer: String
  subdisciplines: [Subdiscipline!]
}

input CategoryInput {
  description: String
  name: String!
  requiredComposer: String
}

type CategoryPayload {
  category: Category
  userErrors: [UserError!]!
}

type ClassType {
  description: String
  festivalClasses: [FestivalClass!]!
  id: Int!
  name: String!
}

input ClassTypeInput {
  description: String
  name: String!
}

type ClassTypePayload {
  classType: ClassType
  userErrors: [UserError!]!
}

type Community {
  city: String
  communityGroups: [CommunityGroup!]
  email: String
  id: Int!
  name: String
  phone: String
  postalCode: String
  province: String
  registration: Registration
  streetName: String
  streetNumber: String
}

type CommunityGroup {
  chaperones: Int
  community: Community
  conflictPerformers: String
  earliestTime: String
  groupSize: Int
  id: Int!
  latestTime: String
  name: String
  photoPermission: Boolean
  unavailable: String
  wheelchairs: Int
}

input CommunityGroupInput {
  chaperones: Int
  conflictPerformers: String
  earliestTime: String
  groupSize: Int
  latestTime: String
  name: String
  photoPermission: Boolean
  unavailable: String
  wheelchairs: Int
}

type CommunityGroupPayload {
  communityGroup: CommunityGroup
  userErrors: [UserError!]!
}

input CommunityInput {
  city: String
  email: String
  name: String
  phone: String
  postalCode: String
  province: String
  streetName: String
  streetNumber: String
}

type CommunityPayload {
  community: Community
  userErrors: [UserError!]!
}

input CredentialsSignin {
  email: String!
  password: String!
}

input CredentialsSignup {
  email: String!
  firstName: String!
  instrument: String
  lastName: String!
  password: String!
  privateTeacher: Boolean!
  schoolTeacher: Boolean!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

"""
An arbitrary-precision Decimal type
"""
scalar Decimal

type Discipline {
  id: Int!
  instruments: [Instrument!]
  name: String!
  subdisciplines(performerType: PerformerType): [Subdiscipline!]
}

input DisciplineInput {
  name: String!
}

type DisciplinePayload {
  discipline: Discipline
  userErrors: [UserError!]!
}

type EmailExists {
  email: String
}

type FestivalClass {
  category: Category!
  classNumber: String!
  classType: ClassType!
  description: String
  id: Int!
  level: Level!
  maxSelections: Int!
  minSelections: Int!
  performerType: PerformerType!
  price: Int
  requiredSelection: String
  subdiscipline: Subdiscipline!
  trophies: [Trophy!]
}

input FestivalClassInput {
  categoryID: Int!
  classNumber: String!
  classTypeID: Int!
  description: String!
  levelID: Int!
  maxSelections: Int!
  minSelections: Int!
  performerType: PerformerType!
  price: Int
  requiredSelection: String
  subdisciplineID: Int!
}

type FestivalClassPayload {
  festivalClass: FestivalClass
  userErrors: [UserError!]!
}

input FestivalClassSearchArgs {
  categoryID: Int
  levelID: Int
  subdisciplineID: Int
}

type FieldConfig {
  communityRequired: Boolean!
  customField: Boolean!
  customFieldType: String
  fieldName: String!
  groupRequired: Boolean!
  id: Int!
  schoolRequired: Boolean!
  soloRequired: Boolean!
  submissionRequired: Boolean!
  tableName: String!
}

type Group {
  age: Int
  groupType: String
  id: Int!
  instruments: String
  name: String
  numberOfPerformers: Int
  registration: Registration
}

input GroupInput {
  age: Int
  groupType: String
  instruments: String
  name: String
  numberOfPerformers: Int
}

type GroupPayload {
  group: Group
  userErrors: [UserError!]!
}

type Instrument {
  discipline: Discipline
  id: Int!
  mozart: Boolean
  name: String!
}

input InstrumentInput {
  disciplineID: Int
  mozart: Boolean
  name: String!
}

type InstrumentPayload {
  instrument: Instrument
  userErrors: [UserError!]!
}

type Item {
  createdAt: DateTime
  description: String
  endDate: DateTime
  id: Int!
  name: String
  notes: String
  orderItems: [OrderItem!]
  orders: [Order!]
  price: Float
  startDate: DateTime
  taxable: Boolean
  transferable: Boolean
  updatedAt: DateTime
}

input ItemInput {
  description: String
  endDate: DateTime
  name: String
  notes: String
  price: Float
  startDate: DateTime
  taxable: Boolean
  transferable: Boolean
}

type ItemPayload {
  item: Item
  userErrors: [UserError!]!
}

type Level {
  categories: [Category!]
  description: String
  festivalClasses(
    categoryID: Int!
    performerType: PerformerType!
    subdisciplineID: Int!
  ): [FestivalClass!]
  id: Int!
  name: String!
  subdisciplines: [Subdiscipline!]
}

input LevelInput {
  description: String
  name: String!
}

type LevelPayload {
  level: Level
  userErrors: [UserError!]!
}

type Mutation {
  categoryCreate(categoryInput: CategoryInput!): CategoryPayload!
  categoryDelete(categoryID: Int!): CategoryPayload!
  categoryUpdate(
    categoryID: Int!
    categoryInput: CategoryInput!
  ): CategoryPayload!
  classTypeCreate(classTypeInput: ClassTypeInput!): ClassTypePayload!
  classTypeDelete(classTypeID: Int!): ClassTypePayload!
  classTypeUpdate(
    classTypeID: Int!
    classTypeInput: ClassTypeInput!
  ): ClassTypePayload!
  communityCreate(
    communityInput: CommunityInput
    registrationID: Int!
  ): CommunityPayload!
  communityDelete(communityID: Int!): CommunityPayload!
  communityGroupCreate(
    communityGroupInput: CommunityGroupInput
    communityID: Int!
  ): CommunityGroupPayload!
  communityGroupDelete(communityGroupID: Int!): CommunityGroupPayload!
  communityGroupUpdate(
    communityGroupID: Int!
    communityGroupInput: CommunityGroupInput!
  ): CommunityGroupPayload!
  communityUpdate(
    communityID: Int!
    communityInput: CommunityInput!
  ): CommunityPayload!
  disciplineCreate(disciplineInput: DisciplineInput!): DisciplinePayload!
  disciplineDelete(disciplineID: Int!): DisciplinePayload!
  disciplineUpdate(
    disciplineID: Int!
    disciplineInput: DisciplineInput!
  ): DisciplinePayload!
  festivalClassCreate(
    festivalClassInput: FestivalClassInput!
  ): FestivalClassPayload!
  festivalClassDelete(festivalClassID: Int!): FestivalClassPayload!
  festivalClassUpdate(
    festivalClassID: Int!
    festivalClassInput: FestivalClassInput!
  ): FestivalClassPayload!
  groupCreate(registrationID: Int!): GroupPayload!
  groupDelete(groupID: Int!): GroupPayload!
  groupUpdate(groupID: Int!, groupInput: GroupInput!): GroupPayload!
  instrumentCreate(instrumentInput: InstrumentInput!): InstrumentPayload!
  instrumentDelete(instrumentID: Int!): InstrumentPayload!
  instrumentUpdate(
    instrumentID: Int!
    instrumentInput: InstrumentInput!
  ): InstrumentPayload!
  itemCreate(ItemInput: ItemInput!): ItemPayload!
  itemDelete(id: Int!): ItemPayload!
  itemUpdate(id: Int!, itemInput: ItemInput!): ItemPayload!
  levelCreate(levelInput: LevelInput!): LevelPayload!
  levelDelete(levelID: Int!): LevelPayload!
  levelUpdate(levelID: Int!, levelInput: LevelInput!): LevelPayload!
  orderCreate(orderInput: OrderInput!): OrderPayload!
  orderDelete(orderID: Int!): OrderPayload!
  orderItemCreate(
    orderID: Int!
    orderItemInput: OrderItemInput!
  ): OrderItemPayload!
  orderItemDelete(itemID: Int!, orderID: Int!): OrderItemPayload!
  orderItemUpdate(
    itemID: Int!
    orderID: Int!
    orderItemInput: OrderItemInput!
  ): OrderItemPayload!
  orderUpdate(orderID: Int!, orderInput: OrderInput!): OrderPayload!
  passwordChange(
    passwordChangeInput: PasswordChangeInput!
  ): PasswordChangePayload!
  performerCreate(
    performerInput: PerformerInput
    registrationID: Int!
  ): PerformerPayload!
  performerDelete(performerID: Int!): PerformerPayload!
  performerUpdate(
    performerID: Int!
    performerInput: PerformerInput!
  ): PerformerPayload!
  registeredClassCreate(
    registeredClass: RegisteredClassInput
    registrationID: Int!
  ): RegisteredClassPayload!
  registeredClassDelete(registeredClassID: Int!): RegisteredClassPayload!
  registeredClassUpdate(
    registeredClassID: Int!
    registeredClassInput: RegisteredClassInput!
  ): RegisteredClassPayload!
  registrationCreate(
    label: String!
    performerType: PerformerType!
  ): RegistrationPayload!
  registrationDelete(registrationID: Int!): RegistrationPayload!
  registrationUpdate(
    registrationID: Int!
    registrationInput: RegistrationInput!
  ): RegistrationPayload!
  schoolCreate(registrationID: Int!, schoolInput: SchoolInput): SchoolPayload!
  schoolDelete(schoolID: Int!): SchoolPayload!
  schoolGroupCreate(
    schoolGroupInput: SchoolGroupInput
    schoolID: Int!
  ): SchoolGroupPayload!
  schoolGroupDelete(schoolGroupID: Int!): SchoolGroupPayload!
  schoolGroupUpdate(
    schoolGroupID: Int!
    schoolGroupInput: SchoolGroupInput!
  ): SchoolGroupPayload!
  schoolUpdate(schoolID: Int!, schoolInput: SchoolInput!): SchoolPayload!
  selectionCreate(registeredClassID: Int!): SelectionPayload!
  selectionDelete(selectionID: Int!): SelectionPayload!
  selectionUpdate(
    selectionID: Int!
    selectionInput: SelectionInput!
  ): SelectionPayload!
  signin(credentials: CredentialsSignin!): AuthPayload!
  signup(credentials: CredentialsSignup!): AuthPayload!
  subdisciplineCreate(
    subdisciplineInput: SubdisciplineInput!
  ): SubdisciplinePayload!
  subdisciplineDelete(subdisciplineID: Int!): SubdisciplinePayload!
  subdisciplineUpdate(
    subdisciplineID: Int!
    subdisciplineInput: SubdisciplineInput!
  ): SubdisciplinePayload!
  teacherCreate(
    privateTeacher: Boolean!
    schoolTeacher: Boolean!
    teacherInput: TeacherInput!
  ): TeacherPayload!
  teacherDelete(teacherID: Int!): TeacherPayload!
  teacherUpdate(teacherID: Int!, teacherInput: TeacherInput!): TeacherPayload!
  trophyCreate(trophyInput: TrophyInput!): TrophyPayload!
  trophyDelete(trophyID: Int!): TrophyPayload!
  trophyUpdate(trophyID: Int!, trophyInput: TrophyInput!): TrophyPayload!
  userDelete(userID: Int!): UserPayload!
  userUpdate(userID: Int!, userInput: UserInput!): UserPayload!
}

type Order {
  createdAt: DateTime
  deliveryDate: DateTime
  id: Int!
  items: [Item!]
  methodDelivered: String
  orderItems: [OrderItem!]
  payedAmount: Float
  purchaseDate: DateTime
  totalAmount: Float
  updatedAt: DateTime
  user: User
}

input OrderInput {
  deliveryDate: DateTime
  methodDelivered: String
  payedAmount: Float
  purchaseDate: DateTime
  totalAmount: Float
}

type OrderItem {
  createdAt: DateTime
  item: Item
  itemID: Int!
  namesOnItems: [String!]!
  notes: String
  order: Order
  orderID: Int!
  quantity: Int!
  updatedAt: DateTime
}

input OrderItemInput {
  itemID: Int!
  namesOnItems: [String!]
  notes: String
  orderID: Int!
  quantity: Int
}

type OrderItemPayload {
  orderItem: OrderItem
  userErrors: [UserError!]!
}

type OrderPayload {
  order: Order
  userErrors: [UserError!]!
}

input PasswordChangeInput {
  password1: String!
  password2: String!
  resetToken: String!
}

type PasswordChangePayload {
  passwordChanged: Boolean!
  userErrors: [UserError!]!
}

type PasswordExists {
  id: Int!
  pass: Boolean!
}

type Performer {
  age: Int
  apartment: String
  city: String
  email: String
  firstName: String
  id: Int!
  instrument: String
  lastName: String
  level: String
  otherClasses: String
  phone: String
  photoPermission: Boolean
  postalCode: String
  pronouns: String
  province: String
  registration: Registration
  streetName: String
  streetNumber: String
  unavailable: String
}

input PerformerInput {
  age: Int
  apartment: String
  city: String
  email: String
  firstName: String
  instrument: String
  lastName: String
  level: String
  otherClasses: String
  phone: String
  photoPermission: Boolean
  postalCode: String
  pronouns: String
  province: String
  streetName: String
  streetNumber: String
  unavailable: String
}

type PerformerPayload {
  performer: Performer
  userErrors: [UserError!]!
}

"""
SOLO, GROUP, SCHOOL, COMMUNITY
"""
enum PerformerType {
  COMMUNITY
  GROUP
  SCHOOL
  SOLO
}

type Query {
  categories(levelID: Int, subdisciplineID: Int): [Category!]!
  category(id: Int!): Category!
  checkIfPasswordExists(id: Int!): PasswordExists!
  checkUser(email: String!): User!
  classType(id: Int!): ClassType!
  classTypes: [ClassType!]!
  communities: [Community!]!
  community(communityID: Int, registrationID: Int): Community!
  communityGroup(communityGroupID: Int!): CommunityGroup!
  communityGroups(communityID: Int): [CommunityGroup!]!
  discipline(id: Int!): Discipline!
  disciplines(instrument: String, performerType: PerformerType): [Discipline!]!
  festivalClass(id: Int!): FestivalClass!
  festivalClassByNumber(festivalClassNumber: String!): FestivalClass!
  festivalClassSearch(
    festivalClassSearch: FestivalClassSearchArgs!
  ): [FestivalClass!]!
  festivalClasses(
    festivalClassSearch: FestivalClassSearchArgs
    performerType: PerformerType
  ): [FestivalClass!]!
  fieldConfig(fieldName: String!, tableName: String!): FieldConfig!
  fieldConfigs: [FieldConfig!]!
  group(groupID: Int, registrationID: Int): Group!
  groups(registrationID: Int): [Group!]!
  instrument(id: Int, name: String): Instrument!
  instruments(disciplineID: Int): [Instrument!]!
  item(id: Int!): Item!
  items: [Item!]!
  level(id: Int!): Level!
  levels(categoryID: Int, subdisciplineID: Int): [Level!]!
  logout: String!
  myStudents: Teacher!
  myUser: User!
  order(id: Int!): Order!
  orderItem(itemID: Int!, orderID: Int!): OrderItem!
  orderItems(orderID: Int!): [OrderItem!]!
  orders: [Order!]!
  passwordChangeEmailVerification(email: String!): EmailExists!
  performer(performerID: Int!): Performer!
  performers(registrationID: Int): [Performer!]!
  registeredClass(registeredClassID: Int!): RegisteredClass!
  registeredClasses(registrationID: Int!): [RegisteredClass!]!
  registration(id: Int!): Registration!
  registrations(performerType: PerformerType): [Registration!]!
  school(registrationID: Int, schoolID: Int): School!
  schoolGroup(schoolGroupID: Int!): SchoolGroup!
  schoolGroups(schoolID: Int): [SchoolGroup!]!
  schools: [School!]!
  selection(selectionID: Int!): Selection!
  selections(registeredClassID: Int): [Selection!]!
  subdiscipline(subdisciplineID: Int!): Subdiscipline!
  subdisciplines(
    disciplineID: Int
    performerType: PerformerType
  ): [Subdiscipline!]!
  teacher(teacherEmail: String, teacherID: Int): Teacher
  teachers(teacherType: String!): [Teacher!]!
  tokenCheck: Boolean!
  trophies: [Trophy!]!
  trophy(id: Int!): Trophy!
  user(email: String, userID: Int): User!
  users: [User!]!
}

type RegisteredClass {
  category: String
  classNumber: String
  classType: String
  communityGroupID: Int
  discipline: String
  id: Int!
  level: String
  maxSelections: Int
  minSelections: Int
  numberOfSelections: Int
  price: Decimal
  schoolGroupID: Int
  selections: [Selection!]
  subdiscipline: String
}

input RegisteredClassInput {
  category: String
  classNumber: String
  classType: String
  communityGroupID: Int
  discipline: String
  level: String
  maxSelections: Int
  minSelections: Int
  numberOfSelections: Int
  price: Float
  schoolGroupID: Int
  subdiscipline: String
}

type RegisteredClassPayload {
  registeredClass: RegisteredClass!
  userErrors: [UserError!]!
}

type Registration {
  community: Community
  confirmation: String
  createdAt: DateTime
  group: Group
  id: Int!
  label: String
  payedAmt: Float
  performerType: PerformerType!
  performers: [Performer!]
  photoPermission: Boolean
  registeredClasses: [RegisteredClass!]
  school: School
  submittedAt: DateTime
  teacher: User
  totalAmt: Float
  transactionInfo: String
  updatedAt: DateTime
  user: User!
}

input RegistrationInput {
  confirmation: String
  label: String
  payedAmt: Float
  performerType: PerformerType
  photoPermission: Boolean
  submittedAt: DateTime
  teacherID: Int
  totalAmt: Float
  transactionInfo: String
}

type RegistrationPayload {
  registration: Registration
  userErrors: [UserError!]!
}

type School {
  city: String
  division: String
  id: Int!
  name: String
  phone: String
  postalCode: String
  province: String
  registration: Registration
  schoolGroups: [SchoolGroup!]
  streetName: String
  streetNumber: String
}

type SchoolGroup {
  chaperones: Int
  conflictPerformers: String
  earliestTime: String
  groupSize: Int
  id: Int!
  latestTime: String
  name: String
  photoPermission: Boolean
  school: School
  unavailable: String
  wheelchairs: Int
}

input SchoolGroupInput {
  chaperones: Int
  conflictPerformers: String
  earliestTime: String
  groupSize: Int
  latestTime: String
  name: String
  photoPermission: Boolean
  unavailable: String
  wheelchairs: Int
}

type SchoolGroupPayload {
  schoolGroup: SchoolGroup
  userErrors: [UserError!]!
}

input SchoolInput {
  city: String
  division: String
  name: String
  phone: String
  postalCode: String
  province: String
  streetName: String
  streetNumber: String
}

type SchoolPayload {
  school: School
  userErrors: [UserError!]!
}

type Selection {
  composer: String
  duration: String
  id: Int!
  largerWork: String
  movement: String
  title: String
}

input SelectionInput {
  composer: String
  duration: String
  largerWork: String
  movement: String
  title: String
}

type SelectionPayload {
  selection: Selection!
  userErrors: [UserError!]!
}

type Subdiscipline {
  categories: [Category!]
  description: String
  discipline: Discipline
  festivalClasses(
    categoryID: Int
    levelID: Int
    performerType: PerformerType
  ): [FestivalClass!]
  id: Int!
  levels: [Level!]
  maxPerformers: Int
  minPerformers: Int
  name: String!
  performerType: PerformerType
  price: Decimal
}

input SubdisciplineInput {
  description: String
  disciplineID: Int!
  maxPerformers: Int
  minPerformers: Int
  name: String!
  performerType: PerformerType!
  price: Decimal
}

type SubdisciplinePayload {
  subdiscipline: Subdiscipline
  userErrors: [UserError!]!
}

type Submission {
  confirmation: String!
  payedAmt: Decimal
  submittedAt: DateTime!
}

type Teacher {
  apartment: String
  city: String
  email: String
  firstName: String
  id: Int!
  instrument: String
  lastName: String
  phone: String
  postalCode: String
  privateTeacher: Boolean
  province: String
  registrations: [Registration!]
  schoolTeacher: Boolean
  streetName: String
  streetNumber: String
}

input TeacherInput {
  apartment: String
  city: String
  email: String
  firstName: String
  instrument: String
  lastName: String
  phone: String
  postalCode: String
  privateTeacher: Boolean
  province: String
  schoolTeacher: Boolean
  streetName: String
  streetNumber: String
}

type TeacherPayload {
  teacher: Teacher
  userErrors: [UserError!]!
}

type Trophy {
  description: String
  festivalClasses: [FestivalClass!]
  id: Int!
  name: String!
}

input TrophyInput {
  description: String
  name: String!
}

type TrophyPayload {
  trophy: Trophy
  userErrors: [UserError!]!
}

type User {
  admin: Boolean
  apartment: String
  city: String
  email: String
  emailConfirmed: Boolean
  firstName: String
  hasSignedIn: Boolean
  id: Int!
  instrument: String
  lastName: String
  orders: [Order!]
  phone: String
  postalCode: String
  privateTeacher: Boolean
  province: String
  registrations: [Registration!]
  schoolTeacher: Boolean
  staff: Boolean
  streetName: String
  streetNumber: String
}

type UserError {
  field: [String!]!
  message: String!
}

input UserInput {
  admin: Boolean
  apartment: String
  city: String
  emailConfirmed: Boolean
  firstName: String
  hasSignedIn: Boolean
  instrument: String
  lastName: String
  phone: String
  postalCode: String
  privateTeacher: Boolean
  province: String
  schoolTeacher: Boolean
  staff: Boolean
  streetName: String
  streetNumber: String
}

type UserPayload {
  user: User
  userErrors: [UserError!]!
}
